---
# Implements:
# https://juju.is/docs/sdk/set-up-your-development-environment
# However, we are assuming the playbook running on a Mac or Ubuntu
# https://linuxcontainers.org/lxd/getting-started-cli/
# https://formulae.brew.sh/formula/juju
# https://discourse.charmhub.io/t/ann-charmcraft-can-now-be-install-from-homebrew/5259
- name: "Kubernetes on Ubuntu VM environment"
  block:
    - name: "Install lxc juju charmcraft - Ubuntu"
      shell: |
        sudo snap install lxd;
        sudo snap install charmcraft --classic;
        sudo snap install juju --classic;
      async: 600
      poll: 5
      tags:
        - "multipass_infra"
        - "operator_e2e"
    - name: "Initialize lxd"
      shell: |
        sudo adduser $USER lxd;
        lxd init --auto;
        newgrp lxd;
      async: 600
      poll: 5
      register: multipass_infra_charm_lxd_init
      tags:
        - "multipass_infra"
        - "operator_e2e"

    # sudo snap install microk8s --channel 1.25-strict/stable
    - name: "install microk8s"
      shell: |
        sudo snap install --classic microk8s;
        sudo adduser $USER microk8s;
        sudo microk8s status --wait-ready;
      async: 600
      poll: 5
      register: multipass_infra_install_microk8s
      tags:
        - "multipass_infra"
        - "operator_e2e"
#    - name: "Create the 'microk8s' group"
#      shell: |
#        newgrp snap_microk8s;
#      async: 600
#      poll: 5
#      register: multipass_infra_create_microk8s
#      tags:
#        - "multipass_infra"
#        - "operator_e2e"
    - name: "add ubuntu to snap_microk8s"
      shell: |
        sudo usermod -a -G snap_microk8s ubuntu;
        exit 0;
      async: 600
      poll: 5
      register: multipass_infra_add_ubuntu_to_snap_microk8s
      tags:
        - "multipass_infra"
        - "operator_e2e"
    - name: "Give the ubuntu user permissions to read the ~/.kube, and Jannah.global.ansible.working_dir"
      shell: |
        sudo chown -f -R ubuntu:ubuntu /home/ubuntu/.kube;
        exit 0;
      async: 600
      poll: 5
      register: multipass_infra_chown_kube_and_working_dir
      tags:
        - "multipass_infra"
        - "operator_e2e"
    - name: "Enable the necessary MicroK8s addons:"
      shell: |
        sudo microk8s enable hostpath-storage dns storage ingress
      async: 600
      poll: 5
      register: multipass_infra_enable_microK8s_addons
      tags:
        - "multipass_infra"
        - "operator_e2e"
    - name: "Set up a short alias for the Kubernetes CLI:"
      shell: |
        sudo snap alias microk8s.kubectl kubectl;
      async: 600
      poll: 5
      register: multipass_infra_short_alias_kubernetes_cli
      tags:
        - "multipass_infra"
        - "operator_e2e"
#    - name: "Since the juju package is strictly confined, you also need to manually create a path"
#      shell: |
#        mkdir -vp /home/ubuntu/.local/share;
#      async: 600
#      poll: 5
#      register: multipass_infra_manually_create_path
#      tags:
#        - "multipass_infra"
#        - "operator_e2e"
    - name: "newgrp microk8s"
      shell: |
        newgrp microk8s;
 #      juju clouds;
 #      exit 0;
      register: multipass_infra_juju_clouds
      tags:
        - "multipass_infra"
        - "operator_e2e"
    - name: "Create MOLECULE_EPHEMERAL_DIRECTORY"
      file:
        path: "$MOLECULE_EPHEMERAL_DIRECTORY"
        state: directory
        mode: 0755
      register: multipass_infra_create_ephemeral_dir
      tags:
        - "multipass_infra"
        - "operator_e2e"
    - name: "Install juju controller into microk8s cloud"
      environment:
        - JUJU_LOGGING_CONFIG: "DEBUG"
        - JUJU_STARTUP_LOGGING_CONFIG: "TRACE"
      shell: |
        juju bootstrap --show-log=true --verbose=true microk8s \
        {{ Jannah.stages.bootstrap.build.juju.controller.name }};
      register: multipass_infra_install_juju_controller_into_microk8s_cloud
      tags:
        - "multipass_infra"
        - "operator_e2e"
    - debug: var=multipass_infra_install_juju_controller_into_microk8s_cloud
      tags:
        - "multipass_infra"
        - "operator_e2e"
    - name: "Create a workspace/model, on the controller"
      shell: |
        juju add-model {{ Jannah.stages.bootstrap.build.juju.model.name }};
      register: multipass_infra_create_a_workspace_model_on_the_controller
      tags:
        - "multipass_infra"
        - "operator_e2e"
    - debug: var=multipass_infra_create_a_workspace_model_on_the_controller
      tags:
        - "multipass_infra"
        - "operator_e2e"

    - name: "Install jhack"
      shell: |
        sudo snap install --edge jhack
        sudo snap connect jhack:dot-local-share-juju snapd
        sudo snap connect jhack:ssh-read snapd
      async: 600
      poll: 5
      register: multipass_infra_install_jhack
      tags:
        - "multipass_infra"
        - "operator_e2e"


    - name: "Deploy operator"
      shell: |
        juju deploy --debug=true --logging-config=true  --show-log=true \
        --verbose=true \
        --model={{ Jannah.stages.bootstrap.build.juju.controller.name }}:{{ Jannah.stages.bootstrap.build.juju.model.name }} \
        ./jannah-operator_ubuntu-22.04-amd64-arm64.charm \
        jannah-operator \
        --resource ubuntu=jujusolutions/jujud-operator:2.9.42 \
        --resource demo_server=ghcr.io/beliaev-maksim/api_demo_server:0.0.9
      async: 600
      poll: 5
      register: multipass_infra_create_a_workspace_model_on_the_controller
      tags:
        - "multipass_infra"
        - "operator_e2e"

    - name: "kubectl gets pods -A"
      shell: |
        kubectl gets pods -A
        exit 0;
      async: 600
      poll: 5
      register: multipass_infra_create_a_workspace_model_on_the_controller
      tags:
        - "multipass_infra"
        - "operator_e2e"

  rescue:
    - name: "Multipass Infra Exception"
      ansible.builtin.debug:
        msg: 'Multipass Infra Exception'
      register: multipass_infra_debug_resources
    - debug: var=multipass_infra_debug_resources
      tags:
        - "multipass_infra"
        - "operator_e2e"
    - name: Re-emit failure
      vars:
        failed_task:
          result: '{{ ansible_failed_result }}'
      fail:
        msg: '{{ failed_task }}'
  ignore_errors: false
