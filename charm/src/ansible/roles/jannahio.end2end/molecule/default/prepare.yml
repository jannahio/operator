---
- name: Prepare
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: "Deploy operator"
      block:
        - name: "start multipass instance for provisioning"
          shell: |
            multipass start {{ Jannah.stages.bootstrap.build.vm.name }};
          async: 1200
          poll: 5
          register: multipass_infra_enable_microK8s_addons
          tags:
            - "multipass_infra"
            - "operator_e2e"
        #-- sudo snap install juju --classic;
        - name: "install juju"
          shell: |
            multipass exec {{ Jannah.stages.bootstrap.build.vm.name }} \
            -- sudo snap install juju --channel 3.0/stable;
          async: 600
          poll: 5
          register: multipass_infra_install_charmcraft_and_juju
          tags:
            - "multipass_infra"
            - "operator_e2e"

        - name: "Since the juju package is strictly confined, you also need to manually create a path"
          shell: |
            multipass exec {{ Jannah.stages.bootstrap.build.vm.name }} \
            -- mkdir -vp /home/ubuntu/.local/share;
          async: 600
          poll: 5
          register: multipass_infra_manually_create_path
          tags:
            - "multipass_infra"
            - "operator_e2e"
        - name: "juju clouds"
          shell: |
            multipass exec {{ Jannah.stages.bootstrap.build.vm.name }} \
            -- juju clouds;
            exit 0;
          register: multipass_infra_juju_clouds
          tags:
            - "multipass_infra"
            - "operator_e2e"
        - name: "Install juju controller into microk8s cloud"
          shell: |
            multipass exec {{ Jannah.stages.bootstrap.build.vm.name }} \
            -- juju bootstrap --show-log=true --verbose=true microk8s \
            {{ Jannah.stages.bootstrap.build.juju.controller.name }};
          async: 1600
          poll: 3
          register: multipass_infra_install_juju_controller_into_microk8s_cloud
          tags:
            - "multipass_infra"
            - "operator_e2e"
        - debug: var=multipass_infra_install_juju_controller_into_microk8s_cloud
          tags:
            - "multipass_infra"
            - "operator_e2e"
        - name: "Create a workspace/model, on the controller"
          shell: |
            multipass exec {{ Jannah.stages.bootstrap.build.vm.name }} \
            -- juju add-model {{ Jannah.stages.bootstrap.build.juju.model.name }};
          async: 1600
          poll: 3
          register: multipass_infra_create_a_workspace_model_on_the_controller
          tags:
            - "multipass_infra"
            - "operator_e2e"
        - debug: var=multipass_infra_create_a_workspace_model_on_the_controller
          tags:
            - "multipass_infra"
            - "operator_e2e"
        - name: "juju status"
          shell: |
            multipass exec {{ Jannah.stages.bootstrap.build.vm.name }} \
            -- juju status;
          tags:
            - "multipass_infra"
            - "operator_e2e"
        - name: "apt update"
          shell: |
            sudo apt update;
            exit 0;
          async: 600
          poll: 5
          register: multipass_infra_install_jhack
          tags:
            - "multipass_infra"
            - "operator_e2e"
        - name: "apt update"
          shell: |
            export DEBIAN_FRONTEND=noninteractive;
            sudo DEBIAN_FRONTEND=noninteractive apt-get -y update;
            sudo DEBIAN_FRONTEND=noninteractive apt-get -y upgrade;
            sudo DEBIAN_FRONTEND=noninteractive apt install -y make \
            python3-dev \
            python3-pip \
            virtualenv;
            exit 0;
          async: 600
          poll: 5
          register: multipass_infra_install_jhack
          tags:
            - "multipass_infra"
            - "operator_e2e"

#        - name: "Install jhack"
#          shell: |
#            sudo snap install --edge jhack
#          async: 600
#          poll: 5
#          register: multipass_infra_install_jhack
#          tags:
#            - "multipass_infra"
#            - "operator_e2e"

        - name: "Pack operator"
          shell: |
            charmcraft pack -v --debug
          args:
            chdir: "{{ Jannah.global.ansible.working_dir }}/charm/"
          async: 1600
          poll: 15
          register: multipass_infra_pack_operator
          tags:
            - "multipass_infra"
            - "operator_e2e"

        - name: "Deploy operator"
          shell: |
            juju deploy --debug=true --logging-config=true  --show-log=true \
            --verbose=true \
            --model={{ Jannah.stages.bootstrap.build.juju.controller.name }}:{{ Jannah.stages.bootstrap.build.juju.model.name }} \
            ./jannah-operator_ubuntu-22.04-amd64-arm64.charm \
            jannah-operator \
            --resource ubuntu=jujusolutions/jujud-operator:2.9.42 \
            --resource demoserver=ghcr.io/beliaev-maksim/api_demo_server:0.0.9;
            exit 0
          async: 1600
          poll: 15
          register: multipass_infra_create_a_workspace_model_on_the_controller
          tags:
            - "multipass_infra"
            - "operator_e2e"

        - name: "kubectl get pods -A"
          shell: |
            kubectl get pods -A
            exit 0;
          async: 600
          poll: 5
          tags:
            - "multipass_infra"
            - "operator_e2e"

      rescue:
        - name: "Multipass Infra Exception"
          ansible.builtin.debug:
            msg: 'Multipass Infra Exception'
          register: multipass_infra_debug_resources
        - debug: var=multipass_infra_debug_resources
          tags:
            - "multipass_infra"
            - "operator_e2e"
        - name: Re-emit failure
          vars:
            failed_task:
              result: '{{ ansible_failed_result }}'
          fail:
            msg: '{{ failed_task }}'
      ignore_errors: false

#    - name: "Create Testing Namespace and Secrets"
#      block:
#        - name: Import tasks
#          include_tasks: '{{ item }}'
#          with_fileglob:
#            - ../../tasks/namespaces/main.yml
#            - ../../tasks/secrets/main.yml
#            - ../../tasks/docker_buildx/main.yml
#          tags:
#            - "bootstrap_jannah_namespace"
#            - "bootstrap_secrets_infra"
#            - "buildx_infra"
#      rescue:
#        - name: "Build namespaces, secrets exception is thrown"
#          ansible.builtin.debug:
#            msg: 'Build namespaces, secrets exception is thrown'
#
#        - name: Re-emit failure
#          vars:
#            failed_task:
#              result: '{{ ansible_failed_result }}'
#          fail:
#            msg: '{{ failed_task }}'
#
#    - name: "ServiceAccount working directory"
#      file:
#        path: "${MOLECULE_EPHEMERAL_DIRECTORY}/ServiceAccounts/template/"
#        state: directory
#        mode: 0755
#      tags:
#        - "secrets_infra"
#
#    - name: "Get the default service account yaml for editing"
#      shell: |
#        kubectl get serviceaccounts default -o yaml >  ${MOLECULE_EPHEMERAL_DIRECTORY}/ServiceAccounts/template/service_account.yaml
#      tags:
#        - "bootstrap_get_serviceaccount_file"
#        - "secrets_infra"
#
#    - name: "modify the default service account for the namespace to use this secret as an imagePullSecret"
#      shell: |
#        kubectl patch serviceaccount default -p '{"imagePullSecrets": [{"name": "{{ Jannah.stages.bootstrap.secrets.image_registry.name }}"}]}';
#      tags:
#        - "bootstrap_patch_serviceaccount_secrets"
#        - "secrets_infra"
#
#    - name: "Get the default service account yaml for editing"
#      shell: |
#        kubectl get serviceaccounts default -o yaml >  ${MOLECULE_EPHEMERAL_DIRECTORY}/ServiceAccounts/template/service_account.yaml
#      tags:
#        - "bootstrap_get_serviceaccount_file"
#        - "secrets_infra"
#
#    - name: "comment out line with resourceVersion"
#      ansible.builtin.replace:
#        path: ${MOLECULE_EPHEMERAL_DIRECTORY}/ServiceAccounts/template/service_account.yaml
#        regexp: 'resourceVersion:'
#        replace: '#resourceVersion:'
#      tags:
#        - "bootstrap_comment_out_resourceVersion"
#        - "secrets_infra"
#
#
#    - name: "Replace the serviceaccount with the new updated file"
#      shell: |
#        kubectl replace serviceaccount default -f ${MOLECULE_EPHEMERAL_DIRECTORY}/ServiceAccounts/template/service_account.yaml
#      tags:
#        - "bootstrap_replace_serviceaccount"
#        - "secrets_infra"
#  ignore_errors: false