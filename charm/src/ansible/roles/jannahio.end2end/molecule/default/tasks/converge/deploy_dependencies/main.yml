---
- name: "Deploy dependencies for Jannah"
  block:
#    - name: "Import dependencies deployment tasks - exec"
#      include_tasks: '{{ deploy_deps_exec_task_items }}'
#      with_fileglob:
#        - exec_dependencies_debug.yml
#      loop_control:
#        loop_var: deploy_deps_exec_task_items
#      when: ansible_facts['os_family'] == "Darwin"
#      tags:
#        - "deploy_dependencies"
#        - "molecule_converge"
#        - "operator_e2e"
#        - "dev_debug"
    - name: "Import dev environment dependency tasks - exec"
      include_tasks: '{{ dev_environment_dependency_exec_task_items }}'
      with_fileglob:
        - exec_dev_environment_dependencies_deployment.yml
      loop_control:
        loop_var: dev_environment_dependency_exec_task_items
      when: ansible_facts['os_family'] == "Darwin" and {{ Jannah.stages.dev.active }} == true
      tags:
        - "deploy_dependencies"
        - "molecule_converge"
        - "operator_e2e"
    - name: "Import dependencies deployment tasks - exec"
      include_tasks: '{{ deploy_deps_exec_task_items }}'
      with_fileglob:
        - exec_dependencies_deployment.yml
      loop_control:
        loop_var: deploy_deps_exec_task_items
      when: ansible_facts['os_family'] == "Darwin" and {{ Jannah.stages.dev.active }} == false
      tags:
        - "deploy_dependencies"
        - "molecule_converge"
        - "operator_e2e"
    - name: "Import dependencies deployment tasks - inline"
      include_tasks: '{{ deploy_deps_inline_task_items }}'
      with_fileglob:
        - inline_dependencies_deployment.yml
      loop_control:
        loop_var: deploy_deps_inline_task_items
      when: ansible_facts['os_family'] == "Debian" and {{ Jannah.stages.dev.active }} == false
      tags:
        - "deploy_dependencies"
        - "molecule_converge"
        - "operator_e2e"
  rescue:
    - name: "Deploy dependencies for Jannah Exception"
      ansible.builtin.debug:
        msg: 'Deploy dependencies for Jannah Exception'
    - name: Re-emit failure
      vars:
        failed_task:
          result: '{{ ansible_failed_result }}'
      fail:
        msg: '{{ failed_task }}'
  ignore_errors: false