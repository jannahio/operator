---
- name: "Deploy dependencies for Jannah"
  block:
    - name: "juju add-model kubeflow - inline"
      shell: |
        juju add-model kubeflow;
        juju models;
        exit 0;
      async: 1600
      poll: 15
      tags:
        - "deploy_dependencies"
        - "molecule_converge"
        - "operator_e2e"
    - name: "juju deploy kubeflow --trust - inline"
      shell: |
        juju deploy kubeflow --trust;
        exit 0;
      async: 1600
      poll: 15
      tags:
        - "deploy_dependencies"
        - "molecule_converge"
        - "operator_e2e"
    - name: "juju deploy mattermost-k8s - inline"
      shell: |
        juju deploy mattermost-k8s;
        exit 0;
      async: 1600
      poll: 15
      tags:
        - "deploy_dependencies"
        - "molecule_converge"
        - "operator_e2e"
    - name: "juju deploy postgresql-k8s - inline"
      shell: |
        juju deploy postgresql-k8s --channel 14/stable --trust;
      async: 1600
      poll: 15
      tags:
        - "deploy_dependencies"
        - "molecule_converge"
        - "operator_e2e"
    - name: "juju integrate mattermost-k8s postgresql-k8s:db - inline"
      shell: |
        juju integrate mattermost-k8s postgresql-k8s:db;
        exit 0;
      async: 1600
      poll: 15
      tags:
        - "deploy_dependencies"
        - "operator_e2e"
        - "molecule_converge"
#    - name: "kubectl apply cluster-scoped-resources - inline"
#      environment:
#        KUBECONFIG: "{{ provisioner.env.MOLECULE_EPHEMERAL_DIRECTORY }}/kind/config"
#        PIPELINE_VERSION: "1.8.5"
#      shell: |
#        kubectl apply -k "github.com/kubeflow/pipelines/manifests/kustomize/cluster-scoped-resources?ref=$PIPELINE_VERSION";
#        exit 0;
#      async: 1600
#      poll: 15
#      register: multipass_infra_create_a_workspace_model_on_the_controller
#      tags:
#        - "deploy_dependencies"
#        - "operator_e2e"
#        - "dev_debug"
#    - name: "kubectl wait --for crd/applications.app.k8s.io - inline"
#      environment:
#        KUBECONFIG: "{{ provisioner.env.MOLECULE_EPHEMERAL_DIRECTORY }}/kind/config"
#        PIPELINE_VERSION: "1.8.5"
#      shell: |
#        kubectl wait --for condition=established --timeout=60s crd/applications.app.k8s.io;
#        exit 0;
#      async: 60
#      poll: 5
#      register: multipass_infra_create_a_workspace_model_on_the_controller
#      tags:
#        - "deploy_dependencies"
#        - "operator_e2e"
#        - "dev_debug"
#    - name: "kubectl apply -k platform-agnostic-pns - inline"
#      environment:
#        KUBECONFIG: "{{ provisioner.env.MOLECULE_EPHEMERAL_DIRECTORY }}/kind/config"
#        PIPELINE_VERSION: "1.8.5"
#      shell: |
#        kubectl apply -k "github.com/kubeflow/pipelines/manifests/kustomize/env/platform-agnostic-pns?ref=$PIPELINE_VERSION";
#        exit 0;
#      async: 60
#      poll: 5
#      register: multipass_infra_create_a_workspace_model_on_the_controller
#      tags:
#        - "deploy_dependencies"
#        - "operator_e2e"
#        - "dev_debug"
#    - name: "kubectl port-forward ml-pipeline-ui - inline"
#      environment:
#        KUBECONFIG: "{{ provisioner.env.MOLECULE_EPHEMERAL_DIRECTORY }}/kind/config"
#        PIPELINE_VERSION: "1.8.5"
#      shell: |
#        kubectl port-forward -n kubeflow svc/ml-pipeline-ui 8080:80;
#        exit 0;
#      async: 60
#      poll: 5
#      register: multipass_infra_create_a_workspace_model_on_the_controller
#      tags:
#        - "deploy_dependencies"
#        - "operator_e2e"
#        - "dev_debug"
#    - name: "kubectl get pods -A after dependencies deployment"
#      environment:
#        KUBECONFIG: "{{ provisioner.env.MOLECULE_EPHEMERAL_DIRECTORY }}/kind/config"
#      shell: |
#        kubectl get pods -A
#        exit 0;
#      async: 600
#      poll: 5
#      tags:
#        - "deploy_dependencies"
#        - "operator_e2e"
#        - "dev_debug"
  rescue:
    - name: "Deploy dependencies for Jannah Exception"
      ansible.builtin.debug:
        msg: 'Deploy dependencies for Jannah Exception'
    - name: Re-emit failure
      vars:
        failed_task:
          result: '{{ ansible_failed_result }}'
      fail:
        msg: '{{ failed_task }}'
  ignore_errors: false
