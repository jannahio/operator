---
- name: "Builds ubuntu frontend docker images for use in Helm Chart"
  block:
    - name: "set_fact jannah_stages_bootstrap_deploy_destination"
      ansible.builtin.set_fact:
        jannah_stages_bootstrap_deploy_destination: "{{ Jannah.stages.bootstrap.deploy.destination }}"
      tags:
        - "deploy_images"
        - "molecule_create"
        - "operator_e2e"
    - name: "set_fact jannah_stages_bootstrap_deploy_os"
      ansible.builtin.set_fact:
        jannah_stages_bootstrap_deploy_os: "{{ Jannah.stages.bootstrap.deploy.os }}"
      tags:
        - "build_images"
        - "build_frontend_images"
        - "molecule_create"
        - "operator_e2e"
    - name: "Create /images/ubuntu/frontend directory"
      file:
        path: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/images/ubuntu/frontend"
        state: directory
        mode: 0755
      tags:
        - "build_images"
        - "build_frontend_images"
        - "molecule_create"
        - "operator_e2e"
    - name: "Git checkout https://github.com/jannahio/frontend.git"
      ansible.builtin.git:
        repo: "{{ Jannah.stages.bootstrap.deploy.helm_values.images.frontend.github.repo }}" 
        dest: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/images/ubuntu/frontend"
        version: "{{ Jannah.stages.bootstrap.deploy.helm_values.images.frontend.github.branch }}" 
      tags:
        - "build_images"
        - "build_frontend_images"
        - "molecule_create"
        - "operator_e2e"
    #   https://www.apollographql.com/docs/ios/tutorial/codegen-getting-started
    - name: "Download iOS Apollo CLI"
      shell: |
        wget  \
        https://github.com/apollographql/apollo-ios/releases/download/1.3.0/apollo-ios-cli.tar.gz;
        tar -xvf apollo-ios-cli.tar.gz;
      async: 600
      poll: 5
      args:
        chdir: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/images/streamos/frontend/mobile/ios"
      tags:
        - "build_images"
        - "build_frontend_images"
        - "molecule_create"
        - "operator_e2e"
    - name: "Generate frontend/ubuntu.frontend.Dockerfile"
      template:
        src: "files/templates/ubuntu/frontend/ubuntu.frontend.Dockerfile"
        dest: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/images/ubuntu/frontend/web/JannahIonic/ubuntu.frontend.Dockerfile"
      tags:
        - "build_images"
        - "build_frontend_images"
        - "molecule_create"
        - "operator_e2e"
    - name: "Generate ubuntu/ubuntu.frontend.Dockerfile.dockerignore"
      template:
        src: "files/templates/ubuntu/frontend/ubuntu.frontend.Dockerfile.dockerignore"
        dest: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/images/ubuntu/frontend/web/JannahIonic/ubuntu.frontend.Dockerfile.dockerignore"
      tags:
        - "build_images"
        - "build_frontend_images"
        - "molecule_create"
        - "operator_e2e"
    - name: "Build Ubuntu frontend image - arm64 docker-desktop"
      shell: |
        docker buildx build \
          --builder=kube \
          -t \
          {{ Jannah.stages.bootstrap.deploy.helm_values.images.frontend.name }}-{{ Jannah.stages.bootstrap.deploy.helm_values.common.arm }}-{{ Jannah.stages.bootstrap.deploy.helm_values.common.ubuntu }}:{{ Jannah.stages.bootstrap.deploy.helm_values.common.tag }} \
          --platform=linux/arm64 \
          -f ubuntu.frontend.Dockerfile \
          --load .
      when: (
              ansible_facts['architecture'] != "x86_64"
              and 
              jannah_stages_bootstrap_deploy_os == "ubuntu"
              and
              jannah_stages_bootstrap_deploy_destination == "docker-desktop"
            )
      async: 9800
      poll: 5
      args:
        chdir: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/images/ubuntu/frontend/web/JannahIonic/"
      tags:
        - "build_images"
        - "build_frontend_images"
        - "molecule_create"
        - "operator_e2e"
    - name: "Build Ubuntu frontend image - arm64 kind clulster"
      shell: |
        docker build \
          -t \
          {{ Jannah.stages.bootstrap.deploy.helm_values.images.frontend.name }}-{{ Jannah.stages.bootstrap.deploy.helm_values.common.arm }}-{{ Jannah.stages.bootstrap.deploy.helm_values.common.ubuntu }}:{{ Jannah.stages.bootstrap.deploy.helm_values.common.tag }} \
          -f ubuntu.frontend.Dockerfile .;
      when: (
              ansible_facts['architecture'] != "x86_64"
              and 
              jannah_stages_bootstrap_deploy_os == "ubuntu"
              and
              jannah_stages_bootstrap_deploy_destination == "kind"
            )
      async: 9800
      poll: 5
      args:
        chdir: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/images/ubuntu/frontend/web/JannahIonic/"
      tags:
        - "build_images"
        - "build_frontend_images"
        - "molecule_create"
        - "operator_e2e"
    - name: "Build Ubuntu frontend image - amd64 docker-desktop"
      shell: |
        docker buildx build \
          --builder=kube \
          -t \
          {{ Jannah.stages.bootstrap.deploy.helm_values.images.frontend.name }}-{{ Jannah.stages.bootstrap.deploy.helm_values.common.amd }}-{{ Jannah.stages.bootstrap.deploy.helm_values.common.ubuntu }}:{{ Jannah.stages.bootstrap.deploy.helm_values.common.tag }} \
          --platform=linux/amd64 \
          -f ubuntu.frontend.Dockerfile \
          --load .
      when: (
              ansible_facts['architecture'] == "x86_64" 
              and 
              jannah_stages_bootstrap_deploy_os == "ubuntu"
              and
              jannah_stages_bootstrap_deploy_destination == "docker-desktop"
            )
      async: 9800
      poll: 5
      args:
        chdir: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/images/ubuntu/frontend/web/JannahIonic/"
      tags:
        - "build_images"
        - "build_frontend_images"
        - "molecule_create"
        - "operator_e2e"
    - name: "Build Ubuntu frontend image - amd64 kind cluster"
      shell: |
        docker build \
          -t \
          {{ Jannah.stages.bootstrap.deploy.helm_values.images.frontend.name }}-{{ Jannah.stages.bootstrap.deploy.helm_values.common.amd }}-{{ Jannah.stages.bootstrap.deploy.helm_values.common.ubuntu }}:{{ Jannah.stages.bootstrap.deploy.helm_values.common.tag }} \
          -f ubuntu.frontend.Dockerfile .;
      when: (
              ansible_facts['architecture'] == "x86_64" 
              and 
              jannah_stages_bootstrap_deploy_os == "ubuntu"
              and
              jannah_stages_bootstrap_deploy_destination == "kind"
            )
      async: 9800
      poll: 5
      args:
        chdir: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/images/ubuntu/frontend/web/JannahIonic/"
      tags:
        - "build_images"
        - "build_frontend_images"
        - "molecule_create"
        - "operator_e2e"
  rescue:
    - name: "Builds Ubuntu Frontend Docker Images Exception"
      ansible.builtin.debug:
        msg: 'Builds Ubuntu Frontend Docker Images Exception'
      tags:
        - "build_images"
        - "build_frontend_images"
        - "molecule_create"
        - "operator_e2e"
    - name: Re-emit failure
      vars:
        failed_task:
          result: '{{ ansible_failed_result }}'
      fail:
        msg: '{{ failed_task }}'
      tags:
        - "build_images"
        - "build_frontend_images"
        - "build_ubuntu_images"
        - "molecule_create"
        - "operator_e2e"
  ignore_errors: false
