---
# Implements https://www.kubeflow.org/docs/components/pipelines/v2/components/container-components/
# A two phase approach to build the Kubeflow pipeline container image 
# 1) First we build the container image off alpine. 
# 2) Second we call the kfp component build command passing the newly built image both as base_image and target_image 
#    via environment variables. This will install the necessary kfp libraries in the image
- name: "Builds container images for use in Kubeflow pipelines"
  block:
    - name: "set_fact jannah_stages_bootstrap_deploy_destination"
      ansible.builtin.set_fact:
        jannah_stages_bootstrap_deploy_destination: "{{ Jannah.stages.bootstrap.deploy.destination }}"
      tags:
        - "deploy_images"
        - "molecule_create"
        - "molecule_create_pipeline_images"
        - "operator_e2e"
    - name: "Create images/pipeline directory"
      file:
        path: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/images/pipelines"
        state: directory
        mode: 0755
      tags:
        - "build_images"
        - "molecule_create"
        - "operator_e2e"
        - "molecule_create_pipeline_images"
    - name: "Generate images/pipelines/kubeflow.component.Dockerfile"
      template:
        src: "files/templates/kubeflow.component.Dockerfile"
        dest: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/images/pipelines/kubeflow.component.Dockerfile"
      tags:
        - "build_images"
        - "molecule_create"
        - "operator_e2e"
        - "molecule_create_pipeline_images"
    - name: "Generate ubuntu/ubuntu.boot.Dockerfile.dockerignore"
      template:
        src: "files/templates/kubeflow.component.Dockerfile.dockerignore"
        dest: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/images/pipelines/kubeflow.component.Dockerfile.dockerignore"
      tags:
        - "build_images"
        - "molecule_create"
        - "operator_e2e"
        - "molecule_create_pipeline_images"
    - name: "Pull alpine image"
      shell: |
        docker pull "{{ Jannah.stages.bootstrap.deploy.helm_values.images.pipeline.dockerfiles.alpine.from }}";
        exit 0;        
      async: 9800
      poll: 5
      tags:
        - "build_images"
        - "build_frontend_images"
        - "molecule_create"
        - "operator_e2e"
        # - "molecule_create_pipeline_images"
# [ARM64] Phase 1 - First we build the container image off alpine 
    - name: "Build kubeflow pipeline component image - arm64 docker-desktop"
      shell: |
        docker buildx build \
          --builder=kube \
          -t \
          {{ Jannah.stages.bootstrap.deploy.helm_values.images.pipeline.name }}-{{ Jannah.stages.bootstrap.deploy.helm_values.common.arm }}-{{ Jannah.stages.bootstrap.deploy.helm_values.common.alpine }}:{{ Jannah.stages.bootstrap.deploy.helm_values.common.tag }} \
          --platform=linux/arm64 \
          -f kubeflow.component.Dockerfile \
          --load "{{ Jannah.global.ansible.working_dir }}"
      when: (
              ansible_facts['architecture'] != "x86_64" 
              and
              jannah_stages_bootstrap_deploy_destination == "docker-desktop"
            )
      async: 9800
      poll: 5
      args:
        chdir: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/images/pipelines/"
      tags:
        - "build_images"
        - "molecule_create"
        - "operator_e2e"
        - "molecule_create_pipeline_images"
    - name: "Build kubeflow pipeline component image - arm64 kind cluster"
      shell: |
        docker build \
          -t \
          {{ Jannah.stages.bootstrap.deploy.helm_values.images.pipeline.name }}-{{ Jannah.stages.bootstrap.deploy.helm_values.common.arm }}-{{ Jannah.stages.bootstrap.deploy.helm_values.common.alpine }}:{{ Jannah.stages.bootstrap.deploy.helm_values.common.tag }} \
          -f kubeflow.component.Dockerfile "{{ Jannah.global.ansible.working_dir }}";
      when: (
              ansible_facts['architecture'] != "x86_64" 
              and 
              jannah_stages_bootstrap_deploy_destination == "kind"
            )
      async: 9800
      poll: 5
      args:
        chdir: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/images/pipelines/"
      tags:
        - "build_images"
        - "molecule_create"
        - "operator_e2e"
        - "molecule_create_pipeline_images"
  # [ARM64] Phase 2 - call the kfp component build command passing the newly built image both as base_image and target_image
    - name: "Rebuild kubeflow pipeline component image using kfp utility - arm64"
      environment:
        - JANNAH_PIPELINE_BASE_IMAGE: "{{ Jannah.stages.bootstrap.deploy.helm_values.images.pipeline.name }}-{{ Jannah.stages.bootstrap.deploy.helm_values.common.arm }}-{{ Jannah.stages.bootstrap.deploy.helm_values.common.alpine }}:{{ Jannah.stages.bootstrap.deploy.helm_values.common.tag }}"
        - JANNAH_PIPELINE_TARGET_IMAGE: "{{ Jannah.stages.bootstrap.deploy.helm_values.images.pipeline.name }}-{{ Jannah.stages.bootstrap.deploy.helm_values.common.arm }}-{{ Jannah.stages.bootstrap.deploy.helm_values.common.alpine }}:{{ Jannah.stages.bootstrap.deploy.helm_values.common.tag }}"
      shell: |
        kfp component build \
        "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/images/ubuntu/middleware/jannah_graphql/jannah_site/pipelines" \
        --component-filepattern \
        my_component.py \
        --no-push-image;
      when: (
              ansible_facts['architecture'] != "x86_64" 
              and 
              (
                jannah_stages_bootstrap_deploy_destination == "kind"
                or 
                jannah_stages_bootstrap_deploy_destination == "docker-desktop"
              )
            )
      async: 600
      poll: 5
      tags:
        - "build_images"
        - "molecule_create"
        - "operator_e2e"
        - "molecule_create_pipeline_images"
# [AMD64] Phase 1 - First we build the container image off alpine 
    - name: "Build Kubeflow pipeline component image - amd64 docker-desktop"
      shell: |
        docker buildx build \
          --builder=kube \
          -t \
          {{ Jannah.stages.bootstrap.deploy.helm_values.images.pipeline.name }}-{{ Jannah.stages.bootstrap.deploy.helm_values.common.amd }}-{{ Jannah.stages.bootstrap.deploy.helm_values.common.alpine }}:{{ Jannah.stages.bootstrap.deploy.helm_values.common.tag }} \
          --platform=linux/amd64 \
          -f kubeflow.component.Dockerfile \
          --load "{{ Jannah.global.ansible.working_dir }}"
      when: (
              ansible_facts['architecture'] == "x86_64" 
              and 
              jannah_stages_bootstrap_deploy_destination == "docker-desktop"
            )
      async: 9800
      poll: 5
      args:
        chdir: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/images/pipelines/"
      tags:
        - "build_images"
        - "molecule_create"
        - "operator_e2e"
        - "molecule_create_pipeline_images"
    - name: "Build Kubeflow pipeline component image - amd64 kind"
      shell: |
        docker build \
          -t \
          {{ Jannah.stages.bootstrap.deploy.helm_values.images.pipeline.name }}-{{ Jannah.stages.bootstrap.deploy.helm_values.common.amd }}-{{ Jannah.stages.bootstrap.deploy.helm_values.common.alpine }}:{{ Jannah.stages.bootstrap.deploy.helm_values.common.tag }} \
          -f kubeflow.component.Dockerfile "{{ Jannah.global.ansible.working_dir }}";
      when: (
              ansible_facts['architecture'] == "x86_64" 
              and 
              jannah_stages_bootstrap_deploy_destination == "kind"
            )
      async: 9800
      poll: 5
      args:
        chdir: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/images/pipelines/"
      tags:
        - "build_images"
        - "molecule_create"
        - "operator_e2e"
        - "molecule_create_pipeline_images"
  # [ARM64] Phase 2 - call the kfp component build command passing the newly built image both as base_image and target_image
    - name: "Rebuild kubeflow pipeline component image using kfp utility - amd64"
      environment:
        - JANNAH_PIPELINE_BASE_IMAGE: "{{ Jannah.stages.bootstrap.deploy.helm_values.images.pipeline.name }}-{{ Jannah.stages.bootstrap.deploy.helm_values.common.amd }}-{{ Jannah.stages.bootstrap.deploy.helm_values.common.alpine }}:{{ Jannah.stages.bootstrap.deploy.helm_values.common.tag }}"
        - JANNAH_PIPELINE_TARGET_IMAGE: "{{ Jannah.stages.bootstrap.deploy.helm_values.images.pipeline.name }}-{{ Jannah.stages.bootstrap.deploy.helm_values.common.amd }}-{{ Jannah.stages.bootstrap.deploy.helm_values.common.alpine }}:{{ Jannah.stages.bootstrap.deploy.helm_values.common.tag }}"
      shell: |
        kfp component build \
        "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/images/ubuntu/middleware/jannah_graphql/jannah_site/pipelines" \
        --component-filepattern \
        my_component.py \
        --no-push-image;
      when: (
              ansible_facts['architecture'] == "x86_64" 
              and 
              (
                jannah_stages_bootstrap_deploy_destination == "kind"
                or 
                jannah_stages_bootstrap_deploy_destination == "docker-desktop"
              )
            )
      async: 600
      poll: 5
      tags:
        - "build_images"
        - "molecule_create"
        - "operator_e2e"
        - "molecule_create_pipeline_images"
  rescue:
    - name: "Builds Ubuntu Docker Images Exception"
      ansible.builtin.debug:
        msg: 'Builds Ubuntu Docker Images Exception'
      tags:
        - "build_images"
        - "build_ubuntu_images"
        - "molecule_create"
        - "operator_e2e"
        - "molecule_create_pipeline_images"
    - name: Re-emit failure
      vars:
        failed_task:
          result: '{{ ansible_failed_result }}'
      fail:
        msg: '{{ failed_task }}'
      tags:
        - "build_images"
        - "build_ubuntu_images"
        - "molecule_create"
        - "operator_e2e"
        - "molecule_create_pipeline_images"
  ignore_errors: false
