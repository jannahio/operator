---
- name: "Deploy Jannah"
  block:
    - name: "set_fact jannah_stages_bootstrap_deploy_destination"
      ansible.builtin.set_fact:
        jannah_stages_bootstrap_deploy_destination: "{{ Jannah.stages.bootstrap.deploy.destination }}"
      tags:
        - "deploy_images"
        - "molecule_converge"
        - "operator_e2e"
        - "debug_task"
    - name: "Import Kubernetes cluster create tasks"
      include_tasks: '{{ create_docker_desktop_task_items }}'
      with_fileglob:
        - tasks/create/docker_desktop/main.yml
      loop_control:
        loop_var: create_docker_desktop_task_items
      when: ansible_facts['os_family'] == "Darwin" and jannah_stages_bootstrap_deploy_destination == "docker-desktop"
      tags:
        - "multipass_infra"
        - "molecule_create"
        - "operator_e2e"
        - "debug_task"
    - name: "Import kind cluster creation tasks"
      include_tasks: '{{ create_kind_cluster_task_items }}'
      with_fileglob:
        - tasks/create/kind/main.yml
      loop_control:
        loop_var: create_kind_cluster_task_items
      #      when: (ansible_facts['os_family'] == "Debian") or (ansible_facts['os_family'] == "Darwin" and ansible_facts['architecture'] == "arm64")
      when: ansible_facts['os_family'] == "Darwin" and jannah_stages_bootstrap_deploy_destination == "kind"
      tags:
        - "multipass_infra"
        - "molecule_create"
        - "operator_e2e"
        - "debug_task"
    - name: "Import k3ai cluster creation tasks"
      include_tasks: '{{ create_kind_cluster_task_items }}'
      with_fileglob:
        - roles/jannahio.end2end/molecule/default/tasks/create/k3ai/main.yml
      loop_control:
        loop_var: create_kind_cluster_task_items
      when: ansible_facts['os_family'] == "Darwin" and jannah_stages_bootstrap_deploy_destination == "k3ai"
      tags:
        - "multipass_infra"
        - "molecule_create"
        - "operator_e2e"
        - "debug_task"
  rescue:
    - name: "Deploy Jannah Exception"
      ansible.builtin.debug:
        msg: 'Deploy Jannah Exception'
    - name: Re-emit failure
      vars:
        failed_task:
          result: '{{ ansible_failed_result }}'
      fail:
        msg: '{{ failed_task }}'
  ignore_errors: false
