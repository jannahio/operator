
---
- name: "Uninstall Jannah specific services"
  block:
    - name: "set_fact jannah_stages_bootstrap_deploy_destination"
      ansible.builtin.set_fact:
        jannah_stages_bootstrap_deploy_destination: "{{ Jannah.stages.bootstrap.deploy.destination }}"
      tags:
        - "deploy_images"
        - "molecule_converge"
        - "operator_e2e"
    - name: "Jannab un-install"
      shell: |
        kubectl delete all --all -n \
        {{ Jannah.stages.bootstrap.deploy.helm_values.common.namespace }};
        exit 0;
      tags:
        - "docker_desktop_infra"
        - "molecule_cleanup"
        - "operator_e2e"

    - name: "Stop created registry container if it already exists and running"
      environment:
        reg_name: "{{ Jannah.stages.bootstrap.deploy.helm_values.images.registry.name }}"
      shell: |
        docker container stop ${reg_name};
        exit 0; 
      when: ansible_facts['os_family'] == "Darwin" and jannah_stages_bootstrap_deploy_destination == "kind"
      args:
        chdir: "${MOLECULE_EPHEMERAL_DIRECTORY}/kind/"
      async: 1200
      poll: 15
      tags:
        - "molecule_create"
        - "operator_e2e"
        - "molecule_create_debug"
    - name: "Remvove created registry container if it already exists and running"
      environment:
        reg_name: "{{ Jannah.stages.bootstrap.deploy.helm_values.images.registry.name }}"
      shell: |
        docker container rm ${reg_name};
        exit 0; 
      when: ansible_facts['os_family'] == "Darwin" and jannah_stages_bootstrap_deploy_destination == "kind"
      args:
        chdir: "${MOLECULE_EPHEMERAL_DIRECTORY}/kind/"
      async: 1200
      poll: 15
      tags:
        - "molecule_create"
        - "operator_e2e"
        - "molecule_create_debug"


  rescue:
    - name: "Clean Prepared Operator MacOs Docker Desktop Exception"
      ansible.builtin.debug:
        msg: 'Clean Prepared Operator MacOs Docker Desktop Exception'
    - name: Re-emit failure
      vars:
        failed_task:
          result: '{{ ansible_failed_result }}'
      fail:
        msg: '{{ failed_task }}'
      tags:
        - "multipass_infra"
        - "molecule_cleanup"
        - "operator_e2e"
  ignore_errors: false
