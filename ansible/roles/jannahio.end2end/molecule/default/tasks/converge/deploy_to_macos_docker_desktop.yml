---
- name: "Deploy Operator to MacOs Docker Desktop Kubernetes Cluster"
  block:
    - name: "set_fact jannah_stages_bootstrap_deploy_type"
      ansible.builtin.set_fact:
        jannah_stages_bootstrap_deploy_type: "{{ Jannah.stages.bootstrap.deploy.type }}"
      tags:
        - "deploy_images"
        - "molecule_converge"
        - "operator_e2e"
    - name: "set_fact jannah_stages_bootstrap_deploy_os"
      ansible.builtin.set_fact:
        jannah_stages_bootstrap_deploy_os: "{{ Jannah.stages.bootstrap.deploy.os }}"
      tags:
        - "deploy_images"
        - "molecule_converge"
        - "operator_e2e"
    - name: "set_fact jannah_stages_bootstrap_deploy_mode"
      ansible.builtin.set_fact:
        jannah_stages_bootstrap_deploy_mode: "{{ Jannah.stages.bootstrap.deploy.mode }}"
      tags:
        - "deploy_images"
        - "molecule_converge"
        - "operator_e2e"
    - name: "Kubeflow install (standalone deployment) docker-desktop cluster scoped-resources"
      environment:
        - PIPELINE_VERSION: "2.0.1"
      shell: |
        kubectl apply -k \
        "github.com/kubeflow/pipelines/manifests/kustomize/cluster-scoped-resources?ref=$PIPELINE_VERSION";
      when: (
        jannah_stages_bootstrap_deploy_type == "standalone"
        or
        jannah_stages_bootstrap_deploy_type == "local"
        )
      tags:
        - "docker_desktop_infra"
        - "molecule_converge"
        - "operator_e2e"
    - name: "Kubeflow install (standalone deployment) docker-desktop cluster - wait for crd/applications.app.k8s.io"
      environment:
        - PIPELINE_VERSION: "2.0.1"
      shell: |
        kubectl wait --for condition=established --timeout=60s crd/applications.app.k8s.io;
        exit 0;
      when: (
              jannah_stages_bootstrap_deploy_type == "standalone"
              or
              jannah_stages_bootstrap_deploy_type == "local"
        )
      tags:
        - "docker_desktop_infra"
        - "molecule_converge"
        - "operator_e2e"
    - name: "Kubeflow install (standalone deployment) - docker-desktop - dev?ref"
      environment:
        - PIPELINE_VERSION: "2.0.1"
      shell: |
        kubectl apply -k "github.com/kubeflow/pipelines/manifests/kustomize/env/dev?ref=$PIPELINE_VERSION";
      when: jannah_stages_bootstrap_deploy_type == "standalone"
      tags:
        - "docker_desktop_infra"
        - "molecule_converge"
        - "operator_e2e"
    - name: "Kubeflow install (local deployment) - docker-desktop - platform-agnostic-pns"
      environment:
        - PIPELINE_VERSION: "2.0.1"
      shell: |
        kubectl apply -k "github.com/kubeflow/pipelines/manifests/kustomize/env/platform-agnostic-pns?ref=$PIPELINE_VERSION"
      when: jannah_stages_bootstrap_deploy_type == "local"
      tags:
        - "docker_desktop_infra"
        - "molecule_converge"
        - "operator_e2e"
    - name: "Create kubeflow download directory"
      file:
        path: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/kubeflow/manifests"
        state: directory
        mode: 0755
      when: jannah_stages_bootstrap_deploy_type == "full"
      tags:
        - "docker_desktop_infra"
        - "molecule_converge"
        - "operator_e2e"
    - name: "Read-write git checkout kubeflow/manifests.git"
      ansible.builtin.git:
        repo: "https://github.com/kubeflow/manifests.git"
        dest: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/kubeflow/manifests"
      when: jannah_stages_bootstrap_deploy_type == "full"
      tags:
        - "docker_desktop_infra"
        - "molecule_converge"
        - "operator_e2e"
    - name: "Kubeflow install (full deployment to docker-desktop)"
      shell: |
        while ! {{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/install_kustomize/kustomize build example | awk '!/well-defined/' | kubectl apply -f -; do echo "Retrying to apply resources"; sleep 10; done;
      when: jannah_stages_bootstrap_deploy_type == "full"
      args:
        chdir: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/kubeflow/manifests"
      tags:
        - "docker_desktop_infra"
        - "molecule_converge"
        - "operator_e2e" 
    - name: "Generate Helm values file off off the molecule configuration file - amd64/ubuntu"
      template:
        src: "files/templates/helm/amd64/ubuntu/values.yml"
        dest: "{{ Jannah.global.ansible.working_dir }}/jannah-operator/values.yaml"
      when: ansible_facts['architecture'] == "x86_64" and jannah_stages_bootstrap_deploy_os == "ubuntu" 
      tags:
        - "docker_desktop_infra"
        - "molecule_converge"
        - "operator_e2e" 
    - name: "Generate Helm values file off off the molecule configuration file - amd64/streamos"
      template:
        src: "files/templates/helm/amd64/streamos/values.yml"
        dest: "{{ Jannah.global.ansible.working_dir }}/jannah-operator/values.yaml"
      when: ansible_facts['architecture'] == "x86_64" and jannah_stages_bootstrap_deploy_os == "streamos" 
      tags:
        - "docker_desktop_infra"
        - "molecule_converge"
        - "operator_e2e"  
    - name: "Generate Helm values file off off the molecule configuration file - arm64/ubuntu"
      template:
        src: "files/templates/helm/arm64/ubuntu/values.yml"
        dest: "{{ Jannah.global.ansible.working_dir }}/jannah-operator/values.yaml"
      when: ansible_facts['architecture'] != "x86_64" and jannah_stages_bootstrap_deploy_os == "ubuntu" 
      tags:
        - "docker_desktop_infra"
        - "molecule_converge"
        - "operator_e2e" 
    - name: "Generate Helm values file off off the molecule configuration file - arm64/streamos"
      template:
        src: "files/templates/helm/arm64/streamos/values.yml"
        dest: "{{ Jannah.global.ansible.working_dir }}/jannah-operator/values.yaml"
      when: ansible_facts['architecture'] != "x86_64" and jannah_stages_bootstrap_deploy_os == "streamos" 
      tags:
        - "docker_desktop_infra"
        - "molecule_converge"
        - "operator_e2e" 
    # - name: "kubectl label namespace default istio-injection=enabled - docker-desktop"
    #   shell: |
    #     kubectl label namespace default istio-injection=enabled;
    #   async: 600
    #   poll: 5
    #   args:
    #     chdir: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL"
    #   tags:
    #     - "deploy_images"
    #     - "molecule_converge"
    #     - "operator_e2e"
    # - name: "kubectl label namespace jannah istio-injection=enabled - docker-desktop"
    #   shell: |
    #     kubectl label namespace \
    #     {{ Jannah.stages.bootstrap.deploy.helm_values.common.namespace }} istio-injection=enabled;
    #   async: 600
    #   poll: 5
    #   args:
    #     chdir: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL"
    #   tags:
    #     - "deploy_images"
    #     - "molecule_converge"
    #     - "operator_e2e"
    - name: "deploy-to-docker-desktop-full-ubuntu-dev-mode - docker-desktop"
      shell: |
        helm install \
        -n {{ Jannah.stages.bootstrap.deploy.helm_values.common.namespace }} \
        --create-namespace  --generate-name \
        {{ Jannah.global.ansible.working_dir }}/jannah-operator;
      async: 600
      poll: 5
      args:
        chdir: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL"
      tags:
        - "deploy_images"
        - "molecule_converge"
        - "operator_e2e"
    - name: "kubectl wait --for=condition=programmed jannah gateway - docker-desktop"
      shell: |
        kubectl wait --for=condition=programmed gtw jannah-gateway;
      tags:
        - "deploy_images"
        - "molecule_converge"
        - "operator_e2e"
    - name: "istioctl analyze gateway configs - docker-desktop"
      shell: |
        {{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/istio/istio-1.20.1/bin/istioctl \
        analyze -n \
        {{ Jannah.stages.bootstrap.deploy.helm_values.common.namespace }};
      async: 600
      poll: 5
      args:
        chdir: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/istio"
      tags:
        - "deploy_images"
        - "molecule_converge"
        - "operator_e2e"
  rescue:
    - name: "Deploy Operator to MacOs Docker Desktop Kubernetes Cluster Exception"
      ansible.builtin.debug:
        msg: 'Deploy Operator to MacOs Docker Desktop Kubernetes Cluster Exception'
      tags:
        - "deploy_images"
        - "molecule_converge"
        - "operator_e2e"
    - name: Re-emit failure
      vars:
        failed_task:
          result: '{{ ansible_failed_result }}'
      fail:
        msg: '{{ failed_task }}'
      tags:
        - "deploy_images"
        - "molecule_converge"
        - "operator_e2e"
  ignore_errors: false
