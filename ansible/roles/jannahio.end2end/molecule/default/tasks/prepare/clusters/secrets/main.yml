---
# Implements:
# https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#add-image-pull-secret-to-service-account
# https://www.knowledgehut.com/blog/devops/private-docker-registry#accessing-a-docker-registry-from-a-kubernetes-cluster-%C2%A0
- name: "Prepare Secrets for Jannah Deployment"
  block:
    - name: "set_fact jannah_stages_bootstrap_deploy_destination"
      ansible.builtin.set_fact:
        jannah_stages_bootstrap_deploy_destination: "{{ Jannah.stages.bootstrap.deploy.destination }}"
      tags:
        - "prepare_images"
        - "molecule_prepare"
        - "operator_e2e"
        - "molecule_prepare_debug"
    - name: "set_fact jannah_stages_bootstrap_deploy_wait_time"
      ansible.builtin.set_fact:
        jannah_stages_bootstrap_deploy_wait_time: "{{ Jannah.stages.bootstrap.deploy.wait_time }}"
      tags:
        - "prepare_images"
        - "molecule_prepare"
        - "operator_e2e"
        - "molecule_prepare_debug"
    - name: "set_fact molecule_prepare_query_secret_root_cert"
      ansible.builtin.set_fact:
        molecule_prepare_query_secret_root_cert: "None"
      tags:
        - "prepare_images"
        - "molecule_prepare"
        - "operator_e2e"
        - "molecule_prepare_debug"
    - name: "set_fact molecule_prepare_query_registry_cred"
      ansible.builtin.set_fact:
        molecule_prepare_query_registry_cred: "None"
      tags:
        - "prepare_images"
        - "molecule_prepare"
        - "operator_e2e"
        - "molecule_prepare_debug"
    - name: "Create secrets/certs directory"
      file:
        path: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/secrets/certs"
        state: directory
        mode: 0755
      tags:
        - "prepare_images"
        - "molecule_prepare"
        - "operator_e2e"
    - name: "Create secrets/auth directory"
      file:
        path: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/secrets/auth"
        state: directory
        mode: 0755
      tags:
        - "prepare_images"
        - "molecule_prepare"
        - "operator_e2e"
    - name: "Create services/registry directory"
      file:
        path: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/services/registry/"
        state: directory
        mode: 0755
      tags:
        - "prepare_images"
        - "molecule_prepare"
        - "operator_e2e"     
    - name: "Create services/registry directory"
      file:
        path: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/services/registry"
        state: directory
        mode: 0755
      tags:
        - "prepare_images"
        - "molecule_prepare"
        - "operator_e2e"
    - name: "Generate SSL - req -x509"
      shell: |
        openssl req -x509 -newkey rsa:4096 \
        -days 365 -nodes -sha256 \
        -keyout "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/secrets/certs/{{ Jannah.stages.bootstrap.secrets.root_cert.key }}" \
        -out "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/secrets/certs/{{ Jannah.stages.bootstrap.secrets.root_cert.cert }}" \
        -subj "/CN={{ Jannah.stages.bootstrap.deploy.helm_values.images.registry.name }}" \
        -addext "subjectAltName = DNS:{{ Jannah.stages.bootstrap.deploy.helm_values.images.registry.name }}";  
      args:
        chdir: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/secrets"
      tags:
        - "prepare_images"
        - "molecule_prepare"
        - "operator_e2e"
    - name: "Use htpasswd to add user authentication"
      shell: |
        docker run \
        --rm \
        --entrypoint \
        htpasswd registry:2.6.2 \
        -Bbn "{{ Jannah.credentials.dockerhub.USERNAME }}" "{{ Jannah.credentials.dockerhub.PASSWORD  }}" > "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/secrets/auth/htpasswd";
      tags:
        - "prepare_images"
        - "molecule_prepare"
        - "operator_e2e"
    # Note: 12/28/2022 - As part of converge and indempotent scenarios,
    # the playbooks/roles are run twice. Since we are creating the secrets
    # on the command line (as oppose to yaml declarations), we need to first
    # query Kubernetes for the secret.  We only create the secrets if they
    # have not already been created.
    - name: "Query root_cert - ssl key/certificate secret - docker-sesktop"
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        # image registry ssl key - docker desktop
        name: '{{ Jannah.stages.bootstrap.secrets.root_cert.name }}'
        namespace: "{{ Jannah.stages.bootstrap.deploy.helm_values.common.namespace }}"
      register: molecule_prepare_query_secret_root_cert
      when: jannah_stages_bootstrap_deploy_destination == "docker-desktop"
      tags:
        - "prepare_images"
        - "molecule_prepare"
        - "operator_e2e"
    - name: "Query root_cert - ssl key/certificate secret - kind cluster"
      environment:
        KUBECONFIG: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/kind/config"
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        # image registry ssl key - kind cluster
        name: '{{ Jannah.stages.bootstrap.secrets.root_cert.name }}'
        namespace: "{{ Jannah.stages.bootstrap.deploy.helm_values.common.namespace }}"
      register: molecule_prepare_query_secret_root_cert
      when: jannah_stages_bootstrap_deploy_destination == "kind"
      tags:
        - "prepare_images"
        - "molecule_prepare"
        - "operator_e2e"
    - name: "Query registry_cred - registry authentication - docker-desktop" 
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        # For image registry automated image pull cred - docker-desktop
        name: '{{ Jannah.stages.bootstrap.secrets.registry_cred.name }}'
        namespace: "{{ Jannah.stages.bootstrap.deploy.helm_values.common.namespace }}"
      register: molecule_prepare_query_registry_cred
      when: jannah_stages_bootstrap_deploy_destination == "docker-desktop"
      tags:
        - "prepare_images"
        - "molecule_prepare"
        - "operator_e2e"
    - name: "Query registry_cred - registry authentication - kind cluster"
      environment:
        KUBECONFIG: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/kind/config" 
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        # For image registry automated image pull cred - kind cluster
        name: '{{ Jannah.stages.bootstrap.secrets.registry_cred.name }}'
        namespace: "{{ Jannah.stages.bootstrap.deploy.helm_values.common.namespace }}"
      register: molecule_prepare_query_registry_cred
      when: jannah_stages_bootstrap_deploy_destination == "kind"
      tags:
        - "prepare_images"
        - "molecule_prepare"
        - "operator_e2e"
    - name: "molecule_prepare_query_secret_root_cert"
      debug: var=molecule_prepare_query_secret_root_cert
      tags:
        - "prepare_images"
        - "molecule_prepare"
        - "operator_e2e"
    - name: "molecule_prepare_query_registry_cred"
      debug: var=molecule_prepare_query_registry_cred
      tags:
        - "prepare_images"
        - "molecule_prepare"
        - "operator_e2e"
    # create the image registry ssl cert secret for docker desktop deployments
    - name: "Create root_cert - ssl key/certificate secret - docker-sesktop"
      shell: |
        kubectl create secret tls "{{ Jannah.stages.bootstrap.secrets.root_cert.name }}" \
        --cert="{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/secrets/certs/{{ Jannah.stages.bootstrap.secrets.root_cert.cert }}" \
        --key="{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/secrets/certs/{{ Jannah.stages.bootstrap.secrets.root_cert.key }}" \
        --namespace="{{ Jannah.stages.bootstrap.deploy.helm_values.common.namespace }}";
      when: (
              (  
                 (
                    'api_found' in molecule_prepare_query_secret_root_cert 
                    and 
                    'resources' in molecule_prepare_query_secret_root_cert 
                    and 
                    molecule_prepare_query_secret_root_cert['api_found'] == true
                    and
                    molecule_prepare_query_secret_root_cert['resources']|length == 0
                 ) 
                 or 
                 molecule_prepare_query_secret_root_cert == "None"
               )
              and 
              jannah_stages_bootstrap_deploy_destination == "docker-desktop"
            )
      tags:
        - "prepare_images"
        - "molecule_prepare"
        - "operator_e2e"
    # create the image registry ssl cert secret for kind deployments
    - name: "Create root_cert - ssl key/certificate secret - kind cluster"
      environment:
        KUBECONFIG: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/kind/config" 
      shell: |
        kubectl create secret tls "{{ Jannah.stages.bootstrap.secrets.root_cert.name }}" \
        --cert="{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/secrets/certs/{{ Jannah.stages.bootstrap.secrets.root_cert.cert }}" \
        --key="{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/secrets/certs/{{ Jannah.stages.bootstrap.secrets.root_cert.key }}" \
        --namespace="{{ Jannah.stages.bootstrap.deploy.helm_values.common.namespace }}";
      when: (
              (  
                 (
                    'api_found' in molecule_prepare_query_secret_root_cert 
                    and 
                    'resources' in molecule_prepare_query_secret_root_cert 
                    and 
                    molecule_prepare_query_secret_root_cert['api_found'] == true
                    and
                    molecule_prepare_query_secret_root_cert['resources']|length == 0
                 ) 
                 or 
                 molecule_prepare_query_secret_root_cert == "None"
               )
              and 
              jannah_stages_bootstrap_deploy_destination == "kind"
            )
      tags:
        - "prepare_images"
        - "molecule_prepare"
        - "operator_e2e"
    # Image registry auth, for docker cli access - docker-desktop context
    # To be used for image pull 
    # Maps to REGISTRY_AUTH_HTPASSWD_PATH on the registry container 
    # value: "/auth/htpasswd"
    - name: "Create registry_cred - registry authentication - docker-desktop"
      shell: |
        kubectl create secret generic "{{ Jannah.stages.bootstrap.secrets.registry_cred.name }}" \
        --from-file="{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/secrets/auth/htpasswd" \
        --namespace="{{ Jannah.stages.bootstrap.deploy.helm_values.common.namespace }}";
      when: (
              (  
                 (
                    'api_found' in molecule_prepare_query_registry_cred 
                    and 
                    'resources' in molecule_prepare_query_registry_cred 
                    and 
                    molecule_prepare_query_registry_cred['api_found'] == true
                    and
                    molecule_prepare_query_registry_cred['resources']|length == 0
                 ) 
                 or 
                 molecule_prepare_query_registry_cred == "None"
               )
              and 
              jannah_stages_bootstrap_deploy_destination == "docker-desktop"
            )
      tags:
        - "prepare_images"
        - "molecule_prepare"
        - "operator_e2e"
    # Image registry auth, for docker cli access - kind cluster context
    # To be used for image pull 
    # Maps to REGISTRY_AUTH_HTPASSWD_PATH on the registry container 
    # value: "/auth/htpasswd"
    - name: "Create registry_cred - registry authentication - kind cluster"
      environment:
        KUBECONFIG: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/kind/config"
      shell: |
        kubectl create secret generic "{{ Jannah.stages.bootstrap.secrets.registry_cred.name }}" \
        --from-file="{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/secrets/auth/htpasswd" \
        --namespace="{{ Jannah.stages.bootstrap.deploy.helm_values.common.namespace }}";
      when: (
              (  
                 (
                    'api_found' in molecule_prepare_query_registry_cred 
                    and 
                    'resources' in molecule_prepare_query_registry_cred 
                    and 
                    molecule_prepare_query_registry_cred['api_found'] == true
                    and
                    molecule_prepare_query_registry_cred['resources']|length == 0
                 ) 
                 or 
                 molecule_prepare_query_registry_cred == "None"
               )
              and 
              jannah_stages_bootstrap_deploy_destination == "kind"
            )
      tags:
        - "prepare_images"
        - "molecule_prepare"
        - "operator_e2e"
    # Volume where the registry will store container images - docker-desktop
    - name: 'Create Registry Persistent Volume - docker-desktop'
      kubernetes.core.k8s:
        definition:
          apiVersion: "{{ Jannah.stages.bootstrap.deploy.helm_values.persistent_volumes.docker_registry.apiVersion }}"
          kind: "{{ Jannah.stages.bootstrap.deploy.helm_values.persistent_volumes.docker_registry.kind }}"
          metadata:
            name: "{{ Jannah.stages.bootstrap.deploy.helm_values.persistent_volumes.docker_registry.metadata.name }}"
            namespace:  "{{ Jannah.stages.bootstrap.deploy.helm_values.common.namespace }}"
          spec:
            capacity:
              storage: "{{ Jannah.stages.bootstrap.deploy.helm_values.persistent_volumes.docker_registry.spec.capacity.storage }}"
            accessModes:
              - "{{ Jannah.stages.bootstrap.deploy.helm_values.persistent_volumes.docker_registry.spec.accessModes[0] }}"
            hostPath:
              path: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/services/registry/{{ Jannah.stages.bootstrap.deploy.helm_values.persistent_volumes.docker_registry.spec.hostPath.path }}"
      when: jannah_stages_bootstrap_deploy_destination == "docker-desktop"
      tags:
        - "prepare_images"
        - "molecule_prepare"
        - "operator_e2e"
    # Volume where the registry will store container images - kind cluster 
    - name: 'Create Registry Persistent Volume - kind cluster'
      environment:
        KUBECONFIG: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/kind/config"
      kubernetes.core.k8s:
        definition:
          apiVersion: "{{ Jannah.stages.bootstrap.deploy.helm_values.persistent_volumes.docker_registry.apiVersion }}"
          kind: "{{ Jannah.stages.bootstrap.deploy.helm_values.persistent_volumes.docker_registry.kind }}"
          metadata:
            name: "{{ Jannah.stages.bootstrap.deploy.helm_values.persistent_volumes.docker_registry.metadata.name }}"
            namespac: "{{ Jannah.stages.bootstrap.deploy.helm_values.common.namespace }}"
          spec:
            capacity:
              storage: "{{ Jannah.stages.bootstrap.deploy.helm_values.persistent_volumes.docker_registry.spec.capacity.storage }}"
            accessModes:
              - "{{ Jannah.stages.bootstrap.deploy.helm_values.persistent_volumes.docker_registry.spec.accessModes[0] }}"
            hostPath:
              path: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/services/registry/{{ Jannah.stages.bootstrap.deploy.helm_values.persistent_volumes.docker_registry.spec.hostPath.path }}"
      when: jannah_stages_bootstrap_deploy_destination == "kind"
      tags:
        - "prepare_images"
        - "molecule_prepare"
        - "operator_e2e"
    # Volume claim for where the registry will store container images - docker-desktop
    - name: 'Create Registry Persistent Volume Claim - docker-desktop'
      kubernetes.core.k8s:
        definition:
          apiVersion: "{{ Jannah.stages.bootstrap.deploy.helm_values.persistent_volume_claims.docker_registry.apiVersion }}"
          kind: "{{ Jannah.stages.bootstrap.deploy.helm_values.persistent_volume_claims.docker_registry.kind }}"
          metadata:
            name: "{{ Jannah.stages.bootstrap.deploy.helm_values.persistent_volume_claims.docker_registry.metadata.name }}"
            namespace:  "{{ Jannah.stages.bootstrap.deploy.helm_values.common.namespace }}"
          spec:
            accessModes:
              - "{{ Jannah.stages.bootstrap.deploy.helm_values.persistent_volume_claims.docker_registry.spec.accessModes[0] }}"
            resources:
              requests:
                storage: "{{ Jannah.stages.bootstrap.deploy.helm_values.persistent_volume_claims.docker_registry.spec.resources.requests.storage }}"
      when: jannah_stages_bootstrap_deploy_destination == "docker-desktop"
      tags:
        - "prepare_images"
        - "molecule_prepare"
        - "operator_e2e"
    # Volume claim for where the registry will store container images - kind cluster
    - name: 'Create Registry Persistent Volume Claim - kind cluster'
      environment:
        KUBECONFIG: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/kind/config"
      kubernetes.core.k8s:
        definition:
          apiVersion: "{{ Jannah.stages.bootstrap.deploy.helm_values.persistent_volume_claims.docker_registry.apiVersion }}"
          kind: "{{ Jannah.stages.bootstrap.deploy.helm_values.persistent_volume_claims.docker_registry.kind }}"
          metadata:
            name: "{{ Jannah.stages.bootstrap.deploy.helm_values.persistent_volume_claims.docker_registry.metadata.name }}"
            namespace:  "{{ Jannah.stages.bootstrap.deploy.helm_values.common.namespace }}"
          spec:
            accessModes:
              - "{{ Jannah.stages.bootstrap.deploy.helm_values.persistent_volume_claims.docker_registry.spec.accessModes[0] }}"
            resources:
              requests:
                storage: "{{ Jannah.stages.bootstrap.deploy.helm_values.persistent_volume_claims.docker_registry.spec.resources.requests.storage }}"
      when: jannah_stages_bootstrap_deploy_destination == "kind"
      tags:
        - "prepare_images"
        - "molecule_prepare"
        - "operator_e2e"
    # Deployment pod for docker registry container - docker desk-top context
    - name: 'Create Registry Pod - docker-desktop'
      kubernetes.core.k8s:
        definition:
          aapiVersion: v1
          kind: Pod
          metadata:
            name:  "{{ Jannah.stages.bootstrap.deploy.helm_values.pods.registry.name }}"
            namespace:  "{{ Jannah.stages.bootstrap.deploy.helm_values.common.namespace }}"
            labels:
            app: "{{ Jannah.stages.bootstrap.deploy.helm_values.images.registry.name }}"
          spec:
            containers:
              - name: "{{ Jannah.stages.bootstrap.deploy.helm_values.images.registry.name }}"
                image: registry:2.6.2
                volumeMounts:
                  - name: repo-vol
                    mountPath: "/var/lib/registry"
                  - name: certs-vol
                    mountPath: "/certs"
                    readOnly: true
                  - name: auth-vol
                    mountPath: "/auth"
                    readOnly: true
                env:
                  - name: REGISTRY_AUTH
                    value: "htpasswd"
                  - name: REGISTRY_AUTH_HTPASSWD_REALM
                    value: "Registry Realm"
                  - name: REGISTRY_AUTH_HTPASSWD_PATH
                    value: "/auth/htpasswd"
                  - name: REGISTRY_HTTP_TLS_CERTIFICATE
                    value: "/certs/{{ Jannah.stages.bootstrap.secrets.root_cert.cert }}"
                  - name: REGISTRY_HTTP_TLS_KEY
                    value: "/certs/{{ Jannah.stages.bootstrap.secrets.root_cert.key }}"
            volumes:
              - name: repo-vol
                persistentVolumeClaim:
                  claimName: "{{ Jannah.stages.bootstrap.deploy.helm_values.persistent_volume_claims.docker_registry.metadata.name }}"
              - name: certs-vol
                secret:
                  secretName: "{{ Jannah.stages.bootstrap.secrets.root_cert.name }}"
              - name: auth-vol
                secret:
                  secretName: "{{ Jannah.stages.bootstrap.secrets.registry_cred.name }}"
      when: jannah_stages_bootstrap_deploy_destination == "docker-desktop"
      tags:
        - "prepare_images"
        - "molecule_prepare"
        - "operator_e2e"
    # Deployment pod for docker registry container - kind cluster context
    - name: 'Create Registry Pod - kind cluster'
      environment:
        KUBECONFIG: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/kind/config"
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Pod
          metadata:
            name:  "{{ Jannah.stages.bootstrap.deploy.helm_values.pods.registry.name }}"
            namespace:  "{{ Jannah.stages.bootstrap.deploy.helm_values.common.namespace }}"
            labels:
            app: "{{ Jannah.stages.bootstrap.deploy.helm_values.images.registry.name }}"
          spec:
            containers:
              - name: "{{ Jannah.stages.bootstrap.deploy.helm_values.images.registry.name }}"
                image: "docker.io/{{ Jannah.stages.bootstrap.deploy.helm_values.common.repository }}/{{ Jannah.stages.bootstrap.deploy.helm_values.images.registry.name }}:{{ Jannah.stages.bootstrap.deploy.helm_values.common.tag }}"
                volumeMounts:
                  - name: repo-vol
                    mountPath: "/var/lib/registry"
                  - name: certs-vol
                    mountPath: "/certs"
                    readOnly: true
                  - name: auth-vol
                    mountPath: "/auth"
                    readOnly: true
                env:
                  - name: REGISTRY_AUTH
                    value: "htpasswd"
                  - name: REGISTRY_AUTH_HTPASSWD_REALM
                    value: "Registry Realm"
                  - name: REGISTRY_AUTH_HTPASSWD_PATH
                    value: "/auth/htpasswd"
                  - name: REGISTRY_HTTP_TLS_CERTIFICATE
                    value: "/certs/{{ Jannah.stages.bootstrap.secrets.root_cert.cert }}"
                  - name: REGISTRY_HTTP_TLS_KEY
                    value: "/certs/{{ Jannah.stages.bootstrap.secrets.root_cert.key }}"
            volumes:
              - name: repo-vol
                persistentVolumeClaim:
                  claimName: "{{ Jannah.stages.bootstrap.deploy.helm_values.persistent_volume_claims.docker_registry.metadata.name }}"
              - name: certs-vol
                secret:
                  secretName: "{{ Jannah.stages.bootstrap.secrets.root_cert.name }}"
              - name: auth-vol
                secret:
                  secretName: "{{ Jannah.stages.bootstrap.secrets.registry_cred.name }}"
      when: jannah_stages_bootstrap_deploy_destination == "kind"
      tags:
        - "prepare_images"
        - "molecule_prepare"
        - "operator_e2e"
    - name: 'Create Registry Service - docker-desktop'
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: "{{ Jannah.stages.bootstrap.deploy.helm_values.images.registry.name }}"
            namespace:  "{{ Jannah.stages.bootstrap.deploy.helm_values.common.namespace }}"
          spec:
            selector:
              app: "{{ Jannah.stages.bootstrap.deploy.helm_values.images.registry.name }}"
            ports:
              - port: 5000
                targetPort: 5000
                protocol: TCP
            # type: ExternalName
            # externalName: "{{ Jannah.stages.bootstrap.deploy.helm_values.images.registry.name }}"
      when: jannah_stages_bootstrap_deploy_destination == "docker-desktop"
      tags:
        - "prepare_images"
        - "molecule_prepare"
        - "operator_e2e"
    - name: 'Create Registry Service - kind cluster'
      environment:
        KUBECONFIG: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/kind/config"
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: "{{ Jannah.stages.bootstrap.deploy.helm_values.images.registry.name }}"
            namespace:  "{{ Jannah.stages.bootstrap.deploy.helm_values.common.namespace }}"
          spec:
            selector:
              app: "{{ Jannah.stages.bootstrap.deploy.helm_values.images.registry.name }}"
            ports:
              - port: 5000
                targetPort: 5000
                protocol: TCP
            # type: ExternalName
            # externalName: "{{ Jannah.stages.bootstrap.deploy.helm_values.images.registry.name }}"
      when: jannah_stages_bootstrap_deploy_destination == "kind"
      tags:
        - "prepare_images"
        - "molecule_prepare"
        - "operator_e2e"
    - name: "Wait for Registry service to deploy"
      shell: |
        sleep "{{ Jannah.stages.bootstrap.deploy.wait_time }}";
      when: jannah_stages_bootstrap_deploy_wait_time != 0
      tags:
        - "prepare_images"
        - "molecule_prepare"
        - "operator_e2e"
    - name: "Get cluster IP - docker-desktop"
      shell: |
        kubectl get svc/jannah-registry -n jannah -o jsonpath='{.spec.clusterIP}';
      register: molecule_prepare_query_register_cluster_ip
      when: jannah_stages_bootstrap_deploy_destination == "docker-desktop"
      tags:
        - "prepare_images"
        - "molecule_prepare"
        - "operator_e2e"
    - name: "Get cluster IP - kind cluster"
      environment:
        KUBECONFIG: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/kind/config"
      shell: |
        kubectl get svc/jannah-registry -n jannah -o jsonpath='{.spec.clusterIP}';
      register: molecule_prepare_query_registry_cluster_ip
      when: jannah_stages_bootstrap_deploy_destination == "kind"
      tags:
        - "prepare_images"
        - "molecule_prepare"
        - "molecule_prepare_debug"
        - "operator_e2e"
    - name: "molecule_prepare_query_registry_cluster_ip"
      debug: var=molecule_prepare_query_registry_cluster_ip
      tags:
        - "prepare_images"
        - "molecule_prepare"
        - "molecule_prepare_debug"
        - "operator_e2e"
    # - name: "Copying REGISTRY_NAME, REGISTRY_IP values to the /etc/hosts - docker-desktop"
    #   environment:
    #     REGISTRY_NAME: "{{ Jannah.stages.bootstrap.deploy.helm_values.images.registry.name }}"
    #     REGISTRY_IP: molecule_prepare_query_registry_cluster_ip
    #   shell: |
    #     for x in \
    #     $(kubectl get nodes -o jsonpath='{ $.items[*].status.addresses[?(@.type=="InternalIP")].address }'); \
    #     do \
    #     ssh root@$x "echo '$REGISTRY_IP $REGISTRY_NAME' >> /etc/hosts"; \
    #     done
    #   when: jannah_stages_bootstrap_deploy_destination == "docker-desktop"
    #   tags:
    #     - "prepare_images"
    #     - "molecule_prepare"
    #     - "molecule_prepare_debug"
    #     - "operator_e2e"
    # - name: "Copying REGISTRY_NAME, REGISTRY_IP values to the /etc/hosts - kind cluster"
    #   environment:
    #     KUBECONFIG: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/kind/config"
    #     REGISTRY_NAME: "{{ Jannah.stages.bootstrap.deploy.helm_values.images.registry.name }}"
    #     #use cluster ip for now
    #     REGISTRY_IP: "10.96.0.1"
    #   shell: |
    #     for x in \
    #     $(kubectl get nodes -o jsonpath='{ $.items[*].status.addresses[?(@.type=="InternalIP")].address }'); \
    #     do \
    #     ssh root@$x "echo '$REGISTRY_IP $REGISTRY_NAME' >> /etc/hosts"; \
    #     done
    #   when: jannah_stages_bootstrap_deploy_destination == "kind"
    #   tags:
    #     - "prepare_images"
    #     - "molecule_prepare"
    #     - "operator_e2e"
    # - name: "Copying the certificates to appropriate locations Part 1 - docker-desktop"
    #   environment:
    #     REGISTRY_NAME: "{{ Jannah.stages.bootstrap.deploy.helm_values.images.registry.name }}"
    #     #use cluster ip for now
    #     REGISTRY_IP: "10.96.0.1"
    #     REGISTRY_PORT: "{{ Jannah.stages.bootstrap.deploy.helm_values.images.registry.port }}"
    #   shell: |
    #     for x in \
    #     $(kubectl get nodes -o jsonpath='{ $.items[*].status.addresses[?(@.type=="InternalIP")].address }'); \
    #     do \
    #     ssh root@$x "rm -rf /etc/docker/certs.d/${REGISTRY_NAME}:${REGISTRY_PORT};\
    #     mkdir -p /etc/docker/certs.d/$REGISTRY_NAME:${REGISTRY_PORT}"; \
    #     done
    #   when: jannah_stages_bootstrap_deploy_destination == "docker-desktop"
    #   tags:
    #     - "prepare_images"
    #     - "molecule_prepare"
    #     - "operator_e2e"
    # - name: "Copying the certificates to appropriate locations Part 1 - kind"
    #   environment:
    #     REGISTRY_NAME: "{{ Jannah.stages.bootstrap.deploy.helm_values.images.registry.name }}"
    #     #use cluster ip for now
    #     REGISTRY_IP: "10.96.0.1"
    #     REGISTRY_PORT: "{{ Jannah.stages.bootstrap.deploy.helm_values.images.registry.port }}"
    #     KUBECONFIG: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/kind/config"
    #   shell: |
    #     for x in \
    #     $(kubectl get nodes -o jsonpath='{ $.items[*].status.addresses[?(@.type=="InternalIP")].address }'); \
    #     do \
    #     ssh root@$x "rm -rf /etc/docker/certs.d/${REGISTRY_NAME}:${REGISTRY_PORT};\
    #     mkdir -p /etc/docker/certs.d/$REGISTRY_NAME:${REGISTRY_PORT}"; \
    #     done
    #   when: jannah_stages_bootstrap_deploy_destination == "kind"
    #   tags:
    #     - "prepare_images"
    #     - "molecule_prepare"
    #     - "operator_e2e"
    # - name: "Copying the certificates to appropriate locations Part 2 - docker-desktop"
    #   environment:
    #     REGISTRY_NAME: "{{ Jannah.stages.bootstrap.deploy.helm_values.images.registry.name }}"
    #     #use cluster ip for now
    #     REGISTRY_IP: "10.96.0.1"
    #     REGISTRY_PORT: "{{ Jannah.stages.bootstrap.deploy.helm_values.images.registry.port }}"
    #   shell: |
    #     for x in $(kubectl get nodes -o 
    #     jsonpath='{ $.items[*].status.addresses[?(@.type=="InternalIP")].address }'); \
    #     do \
    #     scp {{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/secrets/certs/{{ Jannah.stages.bootstrap.secrets.root_cert.cert }} \
    #     root@$x:/etc/docker/certs.d/${REGISTRY_NAME}:${REGISTRY_PORT}/ca.crt; \
    #     done
    #   when: jannah_stages_bootstrap_deploy_destination == "docker-desktop"
    #   tags:
    #     - "prepare_images"
    #     - "molecule_prepare"
    #     - "operator_e2e"
    # - name: "Copying the certificates to appropriate locations Part 2 - kind cluster"
    #   environment:
    #     REGISTRY_NAME: "{{ Jannah.stages.bootstrap.deploy.helm_values.images.registry.name }}"
    #     #use cluster ip for now
    #     REGISTRY_IP: "10.96.0.1"
    #     REGISTRY_PORT: "{{ Jannah.stages.bootstrap.deploy.helm_values.images.registry.port }}"
    #     KUBECONFIG: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/kind/config"
    #   shell: |
    #     for x in $(kubectl get nodes -o 
    #     jsonpath='{ $.items[*].status.addresses[?(@.type=="InternalIP")].address }'); \
    #     do \
    #     scp {{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/secrets/certs/{{ Jannah.stages.bootstrap.secrets.root_cert.cert }} \
    #     root@$x:/etc/docker/certs.d/${REGISTRY_NAME}:${REGISTRY_PORT}/ca.crt; \
    #     done
    #   when: jannah_stages_bootstrap_deploy_destination == "kind"
    #   tags:
    #     - "prepare_images"
    #     - "molecule_prepare"
    #     - "operator_e2e"
    # - name: "Login to registry"
    #   environment:
    #     REGISTRY_NAME: "{{ Jannah.stages.bootstrap.deploy.helm_values.images.registry.name }}"
    #     #use cluster ip for now
    #     REGISTRY_IP: "10.96.0.1"
    #   shell: |
    #     echo "{{ Jannah.credentials.dockerhub.PASSWORD  }}"  | docker login -u "{{ Jannah.credentials.dockerhub.USERNAME }}" --password-stdin
    #   tags:
    #     - "prepare_images"
    #     - "molecule_prepare"
    #     - "operator_e2e"
    #  # image registry automated image pull cred
    # - name: "Create registry creds - docker-desktop"
    #   shell: |
    #     kubectl create \
    #     secret docker-registry \
    #     "{{ Jannah.stages.bootstrap.secrets.registry_cred.name }}" \
    #     --docker-server={{ Jannah.stages.bootstrap.deploy.helm_values.images.registry.name }}:{{ Jannah.stages.bootstrap.deploy.helm_values.images.registry.port }} \
    #     --docker-username="{{ Jannah.credentials.dockerhub.USERNAME  }}" \
    #     --docker-password="{{ Jannah.credentials.dockerhub.PASSWORD  }}"
    #   when: jannah_stages_bootstrap_deploy_destination == "docker-desktop"
    #   tags:
    #     - "prepare_images"
    #     - "molecule_prepare"
    #     - "operator_e2e"
    # - name: "Create registry creds - kind cluster"
    #   environment:
    #     KUBECONFIG: "{{ Jannah.global.ansible.working_dir }}/tmp/EPHEMERAL/kind/config"
    #   shell: |
    #     kubectl create \
    #     secret docker-registry \
    #     "{{ Jannah.stages.bootstrap.secrets.registry_cred.name }}" \
    #     --docker-server={{ Jannah.stages.bootstrap.deploy.helm_values.images.registry.name }}:{{ Jannah.stages.bootstrap.deploy.helm_values.images.registry.port }} \
    #     --docker-username="{{ Jannah.credentials.dockerhub.USERNAME  }}" \
    #     --docker-password="{{ Jannah.credentials.dockerhub.PASSWORD  }}"
    #   when: jannah_stages_bootstrap_deploy_destination == "kind"
    #   tags:
    #     - "prepare_images"
    #     - "molecule_prepare"
    #     - "operator_e2e"
  rescue:
    - name: "Prepare Secrets for Jannah Exception"
      ansible.builtin.debug:
        msg: "Prepare Secrets for Jannah Exception"
      register: prepare_jannah_tasks_debug_resources
      tags:
        - "prepare_images"
        - "molecule_prepare"
        - "operator_e2e"
    - debug: var=prepare_jannah_tasks_debug_resources
      tags:
        - "prepare_images"
        - "molecule_prepare"
        - "operator_e2e"
    - name: "Re-emit failure"
      vars:
        failed_task:
          result: '{{ ansible_failed_result }}'
      fail:
        msg: '{{ failed_task }}'
      tags:
        - "prepare_images"
        - "molecule_prepare"
        - "operator_e2e"
  ignore_errors: false
