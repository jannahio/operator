---
dependency:
  name: galaxy
driver:
  name: delegated
platforms:
  - name: cluster
    groups:
      - k8s
provisioner:
  name: ansible
  log: True
  lint: |
    set -e
    ansible-lint
  inventory:
    group_vars:
      all:
        Jannah:
          global:
            namespace: jannah-operator-system
            ansible:
              working_dir: "{{ provisioner.inventory.group_vars.all.Jannah.global.ansible.working_dir }}"
          credentials:
            github:
              GITHUB_USERNAME: "{{ provisioner.inventory.group_vars.all.Jannah.credentials.github.GITHUB_USERNAME }}"
              GITHUB_TOKEN: "{{ provisioner.inventory.group_vars.all.Jannah.credentials.github.GITHUB_TOKEN }}"
            dockerhub:
              url: https://index.docker.io/v1/
              USERNAME: "{{ provisioner.inventory.group_vars.all.Jannah.credentials.dockerhub.USERNAME }}"
              PASSWORD: "{{ provisioner.inventory.group_vars.all.Jannah.credentials.dockerhub.PASSWORD }}"
              EMAIL: "{{ provisioner.inventory.group_vars.all.Jannah.credentials.dockerhub.EMAIL }}"
          stages:
            day1day2:
              sub_dir:
            dev:
              active: true
            bootstrap:
              laptop:
                provision_scripts:
                  - name: 1_Apple_Developer_Tools
                    description: |
                      xcode-select --install;
                      python3 --version;
                      git --version
                    comments: |
                      Install Apple Developer tools. i.e xcode, git, python3 etc.
                  - name: 2_Homebrew_Cask_Github_Client
                    description: |
                      curl https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh;
                      ./install.sh;
                      /opt/homebrew/bin/brew shellenv >> ~/.zprofile;
                      /opt/homebrew/bin/brew shellenv
                    comments: |
                      Install Homebrew, Cask, and Github.com client.
                  - name: 3_Input_Directory_Github_Token
                    description: |
                      mkdir -vp ~/.jannah-operator;
                      echo "ghp_Your_Github_Token" > ~/.jannah-operator/git_token.txt;
                      source ~/.zprofile;
                      gh auth login --with-token < ~/.jannah-operator/git_token.txt
                    comments: |
                      <a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token" title="Generate a Github token">
                      Generate a Github.com token</a> and login to Github.
                  - name: 4_Clone_Jannah_Code
                    description: |
                      mkdir -vp ~/working/jannahio;
                      source ~/.zprofile;
                      cd ~/working/jannahio;
                      gh repo clone jannahio/operator
                    comments: |
                      Create a 'working' directory, and clone the Jannah repository.
                  - name: 5_Install_IntelliJ_IDE
                    description: |
                      hdiutil mount ~/Downloads/ideaIC-2022.3.2-aarch64.dmg;
                      cp -R '/Volumes/IntelliJ IDEA CE/IntelliJ IDEA CE.app' /Applications;
                      hdiutil unmount "/Volumes/IntelliJ IDEA CE/IntelliJ IDEA CE.app";
                      rm ~/Downloads/ideaIC-2022.3.2-aarch64.dmg;
                    comments: |
                      Download, mount, and copy IntelliJ IDE
                      to your MacOS Applications folder.
                  - name: 6_Install_VS_Code_IDE
                    description: |
                      cd $HOME/Downloads
                      curl -v -o VSCode-darwin-universal.zip [VS Code IDE]
                      unzip VSCode-darwin-universal.zip;
                      cp -R "$HOME/Downloads/Visual Studio Code.app" /Applications/;
                      cd $HOME/Downloads;
                      rm -rf "$HOME/Downloads/Visual Studio Code.app";
                      rm "VSCode-darwin-universal.zip"
                    comments: |
                      Download [VS Code IDE], unzip, and copy
                      to your MacOS Applications folder.
                  - name: 7_Install_Docker_Desktop
                    description: |
                      cd $HOME/Downloads;
                      curl -v -o Docker.dmg [Docker Desktop];
                      hdiutil mount ~/Downloads/Docker.dmg;
                      cp -R "/Volumes/Docker/Docker.app" /Applications/;
                      rm ~/Downloads/Docker.dmg
                    comments: |
                      Download, mount, and copy Docker Desktop
                      to your MacOS Applications folder.
                  - name: 8_Install_Google_Chrome
                    description: |
                      cd $HOME/Downloads;
                      curl -v -o Docker.dmg [Google Chrome];
                      hdiutil mount ~/Downloads/googlechrome.dmg;
                      cp -R "/Volumes/Google Chrome/Google Chrome.app" /Applications/;
                      hdiutil unmount "/Volumes/Google Chrome/Google Chrome.app";
                      rm ~/Downloads/googlechrome.dmg
                    comments: |
                      Download, mount, and copy Chrome
                      to your MacOS Applications folder.
                  - name: 9_Install_Yaml_yq
                    description: |
                      source ~/.zprofile;
                      brew install yq
                    comments: |
                      Install yq for yaml command line editing.
                  - name: 10_Install_Ansible
                    description: |
                      source ~/.zprofile;
                      brew install ansible
                      brew install virtualenv
                      brew install wget
                      brew install operator-sdk
                    comments: |
                      Installs Ansible and related tooling for automation tasks.
                make_commands:
                  - name: make jannah-boot-credentials;
                    description: |
                      Confirms that ~/.jannah-operator/ exists;
                      Copies molecule.bootstrap.template.yml to ~/.jannah-operator/;
                      Encrypts GITHUB_USERNAME as an Ansible vault variable;
                      Encrypts GITHUB_TOKEN as an Ansible vault variable;
                      Encrypts DOCKERHUB_USERNAME as an Ansible vault variable;
                      Encrypts DOCKERHUB_TOKEN as an Ansible vault variable;
                      Encrypts DOCKERHUB_EMAIL as an Ansible vault variable;
                  - name: make jannah-python-backup;
                    description: |
                      make jannah-boot-credentials;
                      Backup any previous jannah-python virtual environment.
                      Backup any previous molecule file.
                  - name: make jannah-python-clean;
                    description: |
                      jannah-python-backup;
                      Backup and remove the dev python virtual environment
                  - name: make jannah-python;
                    description: |
                      make jannah-boot-credentials;
                      Creates a python virtual environment for working with Jannah.
                      Installs required Python modules for bootstrapping.
                  - name: make jannah-config;
                    description: "Generates molecule configuration files for all down stream Ansible Playbook roles.\nThe same molecule yaml file is used to hydrate the configuration of the Python Charm.\nThis keeps one source of configuration for all down stream components. \n- roles/jannahio.bootstrap/molecule/default/molecule.yml.\n- operators/ansible_based/jannah-operator/molecule/default/molecule.yml.\n- roles/jannahio.bootstrap/molecule/default/.env.\n- operators/ansible_based/jannah-operator/molecule/default/.env.\n- operators/ansible_based/jannah-operator/roles/install/defaults/exec.yml.\n- operators/ansible_based/jannah-operator/roles/requirements/defaults/exec.yml.\n\nAnsible role tags: \n- d1d2-generate-molecule-configurations\n"
                  - name: make jannah-day1-day2;
                    description: |
                      brew upgrade;
                      brew install --cask multipass;
                      brew install kdoctor  cocoapods;
              url_artifacts:
                - name: "[Docker Desktop]"
                  url: "https://desktop.docker.com/mac/main/arm64/Docker.dmg?utm_source=docker&utm_medium=webreferral&utm_campaign=dd-smartbutton&utm_location=module"
                - name: "[jannah-operator]"
                  url: "https://github.com/jannahio/operator"
                - name: "[jannah-organization]"
                  url: "https://github.com/jannahio"
                - name: "[laptop-provisioning]"
                  url: "https://github.com/jannahio/operator/ansible/roles/jannahio.day1day2/tasks/laptop_provisioning/"
                - name: "[IntelliJ IDE]"
                  url: "https://download.jetbrains.com/idea/ideaIC-2022.3.2-aarch64.dmg?_gl=1*1m2uf1n*_ga*MTU0NTQ0NDIwMS4xNjc1NDQ4MDAy*_ga_9J976DJZ68*MTY3NTQ0ODAwMS4xLjEuMTY3NTQ0ODEyOS4wLjAuMA..&_ga=2.260209485.1373883433.1675448002-1545444201.1675448002"
                - name: "[VS Code IDE]"
                  url: "https://az764295.vo.msecnd.net/stable/e2816fe719a4026ffa1ee0189dc89bdfdbafb164/VSCode-darwin-universal.zip"
                - name: "[Google Chrome]"
                  url: "https://dl.google.com/chrome/mac/universal/stable/GGRO/googlechrome.dmg"
                - name: "[Docker Desktop]"
                  url: "https://desktop.docker.com/mac/main/arm64/Docker.dmg?utm_source=docker&utm_medium=webreferral&utm_campaign=dd-smartbutton&utm_location=module"
                - name: "[Molecule Configuration]"
                  url: "https://molecule.readthedocs.io/en/latest/configuration.html"
                - name: "[Jannah Get Start]"
                  url: "/boot/"
              conig_map:
                name: bootstrap-config
                apiVersion: v1
                data:
                  phase: bootstrap
              downloads:
                opm: opm
                base_dir: downloads
              build:
                USERNAME: jallohmediabuild
                VERSION: 0.0.1
                builderx:
                  - name: jannah_builder
                    driver: kubernetes
                    services:
                      - name: frontend
                        giturl: https://github.com/jannahio/frontend.git
                        image: docker.io/jallohmediabuild/jannah-frontend:v0.0.1
                      - name: middlware
                        giturl: https://github.com/jannahio/middleware.git
                        image: docker.io/jallohmediabuild/jannah-middleware:v0.0.1
              deploy:
                #  full|local|standalone
                type: "{{ provisioner.inventory.group_vars.all.Jannah.stages.bootstrap.deploy.type }}"
                # docker-desktop|kind
                destination: "{{ provisioner.inventory.group_vars.all.Jannah.stages.bootstrap.deploy.destination }}"
                # ubuntu|streamos
                os: "{{ provisioner.inventory.group_vars.all.Jannah.stages.bootstrap.deploy.os }}"
                # dev|test|integration|train|stage|production
                # if mode is dev, native Jannah services are deployed in local containers 
                mode: "{{ provisioner.inventory.group_vars.all.Jannah.stages.bootstrap.deploy.mode }}"
                # for multiple/matrix debug purposes, the generic wait time between deployment types
                wait_time: "{{ provisioner.inventory.group_vars.all.Jannah.stages.bootstrap.deploy.wait_time }}"
                dependencies:
                  parcona_postgres:
                    namespace: parcona-operator
                docker_desktop:
                  name: docker-desktop
                kind:
                  name: jannah-kind
                  wait: 5m
                  #control_plane:
                  #image: kindest/node:v1.26.3@sha256:3dc28d458c92e3252c78752ade134d7231ce8e3565f2de4e437a77b171d046ea
                  nodes:
                    arm64:
                      image: kindest/node:v1.26.3@sha256:3dc28d458c92e3252c78752ade134d7231ce8e3565f2de4e437a77b171d046ea
                      arch: arm64
                    amd64:
                      image: kindest/node:v1.26.3@sha256:94eb63275ad6305210041cdb5aca87c8562cc50fa152dbec3fef8c58479db4ff
                      arch: amd64
                helm_values:
                  common:
                    name: jannah
                    namespace: jannah
                    amd: "amd64"
                    arm: "arm64"
                    ubuntu: ubuntu
                    streamos: streamos
                    tag: "v0.0.1"
                  images:
                    proxy:
                      repository: nginx
                      pullPolicy: IfNotPresent
                      tag: ""
                      port: 80
                    frontend:
                      name:  jannah-web-ui
                      repository: jallohmediabuild/jannah-ubuntu-frontend-web-ui
                      pullPolicy: IfNotPresent
                      port: 8100
                    middleware:
                      name:  jannah-middleware
                      repository: jallohmediabuild/jannah-ubuntu-middleware
                      pullPolicy: IfNotPresent
                      port: 8000
              secrets:
                image_registry:
                  name: myregistrykey
                  namespace: default
                  apiVersion: v1
                root_cert:
                  name: dex-certs
                  cert: ssl/tls.crt
                  key: ssl/tls.key
                config:
                  options:
                    log-level:
                      description: "Configures the log level of gunicorn. \n\nAcceptable values are: \"info\", \"debug\", \"warning\", \"error\" and \"critical\"\n"
                      default: "info"
                      type: string
    host_vars:
      localhost:
        name: osmanj-mac-0
        ansible_python_interpreter: '{{ ansible_playbook_python }}'
        config_dir: ${MOLECULE_PROJECT_DIRECTORY}/config
        samples_dir: ${MOLECULE_PROJECT_DIRECTORY}/config/samples
        operator_image: ${OPERATOR_IMAGE:-""}
        operator_pull_policy: ${OPERATOR_PULL_POLICY:-"Always"}
        kustomize: ${KUSTOMIZE_PATH:-kustomize}
  env:
    K8S_AUTH_KUBECONFIG: ${KUBECONFIG:-"~/.kube/config"}
    KUSTOMIZE_PATH: "/usr/local/bin/kustomize"
    MOLECULE_EPHEMERAL_DIRECTORY: "{{ provisioner.env.MOLECULE_EPHEMERAL_DIRECTORY }}"
verifier:
  name: ansible
